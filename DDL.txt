-- DDL command file
-- Authors - Nibir Nandi Dibbo
-- This query contains DDL statements to create the database structure.

-- Student table
CREATE TABLE STUDENT(
StudentID INT PRIMARY KEY,
StudentName VARCHAR(50) NOT NULL,
Birthdate DATE NOT NULL,
Gender VARCHAR(10) NOT NULL,
LegalGuardians VARCHAR(50) NOT NULL,
DateEnrolled DATE NOT NULL,
DateTransferred DATE,
DateDroppedOut	DATE,
DateGraduated DATE
CHECK (DateTransferred IS NULL OR DateTransferred > DateEnrolled),
CHECK (DateDroppedOut IS NULL OR DateDroppedOut > DateEnrolled),
CHECK (DateGraduated IS NULL OR DateGraduated > DateEnrolled)
);

-- Courses table
CREATE TABLE COURSES(
CourseID INT PRIMARY KEY,
CourseName VARCHAR(30) NOT NULL,
CourseLocation VARCHAR(20) NOT NULL
); 

-- Enrollments table
CREATE TABLE ENROLLMENTS(
EnrollmentID INT PRIMARY KEY,
HomeroomTeacher VARCHAR(50) NOT NULL,
HomeroomLocation VARCHAR(20) NOT NULL,
AcademicYear VARCHAR(10) NOT NULL,
COURSES_CourseID INT,
FOREIGN KEY (COURSES_CourseID) REFERENCES COURSES(CourseID)
);

-- ENROLLMENTS_has_STUDENT intersecting table
CREATE TABLE ENROLLMENT_has_STUDENT(
ENROLLMENTS_EnrollmentID INT,
STUDENT_StudentID INT,
FOREIGN KEY (ENROLLMENTS_EnrollmentID) REFERENCES ENROLLMENTS(EnrollmentID),
FOREIGN KEY (STUDENT_StudentID) REFERENCES STUDENT(StudentID)
);

-- Grades table
CREATE TABLE GRADES(
GPA_Periodic DECIMAL(4,2) NOT NULL,
Overall_GPA DECIMAL(4,2) NOT NULL,
COURSES_CourseID INT,
FOREIGN KEY (COURSES_CourseID) REFERENCES COURSES(CourseID)
);

-- Legal Guardians table
CREATE TABLE LEGAL_GUARDIANS(
GuardianID INT PRIMARY KEY,
Name VARCHAR(50) NOT NULL,
HomePhone INT NOT NULL,
ChildrenNames VARCHAR(50) NOT NULL,
Gender VARCHAR(20) NOT NULL,
Birthdate DATE NOT NULL
);

-- STUDENT_has_LEGAL_GUARDIAN intersecting table
CREATE TABLE STUDENT_has_LEGAL_GUARDIAN(
STUDENT_StudentID INT,
LEGAL_GUARDIANS_GuardianID INT,
FOREIGN KEY (STUDENT_StudentID) REFERENCES STUDENT(StudentID),
FOREIGN KEY (LEGAL_GUARDIANS_GuardianID) REFERENCES LEGAL_GUARDIANS(GuardianID)
);

-- Address table
CREATE TABLE ADDRESSES(
AddressID INT PRIMARY KEY,
Street VARCHAR(40) NOT NULL,
City VARCHAR(30) NOT NULL,
PostalCode VARCHAR(10) NOT NULL,
STUDENT_StudentID INT,
LEGAL_GUARDIANS_GuardianID INT,
FOREIGN KEY (STUDENT_StudentID) REFERENCES STUDENT(StudentID),
FOREIGN KEY (LEGAL_GUARDIANS_GuardianID) REFERENCES LEGAL_GUARDIANS(GuardianID)
);

-- Extracurricular Activities table
CREATE TABLE EXTRACURRICULAR_ACTIVITIES(
StudentName VARCHAR(45) NOT NULL,
AcademicYear VARCHAR(10) NOT NULL,
TeamName VARCHAR(50) NOT NULL,
Offices VARCHAR(30) NOT NULL,
STUDENT_StudentID INT,
FOREIGN KEY (STUDENT_StudentID) REFERENCES STUDENT(StudentID)
);

-- Post High School Plan table
CREATE TABLE POST_HIGH_SCHOOL_PLAN(
EducationChosen VARCHAR(50) NOT NULL,
AppliedTo VARCHAR(50) NOT NULL,
ApplicationDate DATE NOT NULL,
ApplicationResult VARCHAR(10) NOT NULL,
STUDENT_StudentID INT,
FOREIGN KEY (STUDENT_StudentID) REFERENCES STUDENT(StudentID)
);

-- Disciplinary Action table
CREATE TABLE DISCIPLINARY_ACTION(
RecordID INT PRIMARY KEY,
StudentName VARCHAR(45) NOT NULL,
IncidentType VARCHAR(30) NOT NULL,
IncidentDate DATE NOT NULL,
ActionTaken VARCHAR(50) NOT NULL,
STUDENT_StudentID INT,
FOREIGN KEY (STUDENT_StudentID) REFERENCES STUDENT(StudentID)
);

-- Testing Result table
CREATE TABLE TESTING_RESULT(
TestCode INT PRIMARY KEY NOT NULL,
TestName VARCHAR(50) NOT NULL,
TestDate DATE NOT NULL,
Test_Result DECIMAL(5,2) NOT NULL,
StudentName VARCHAR(50) NOT NULL
);

-- Student_Has_Testing_Result intersecting table
CREATE TABLE STUDENT_HAS_TESTING_RESULT(
STUDENT_StudentID INT,
TESTING_RESULT_TestID  INT,
FOREIGN KEY (TESTING_RESULT_TestID) REFERENCES TESTING_RESULT(TestCode),
FOREIGN KEY (STUDENT_StudentID) REFERENCES STUDENT(StudentID)
);